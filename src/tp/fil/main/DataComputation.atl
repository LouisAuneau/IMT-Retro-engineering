-- @nsURI Java=http://www.eclipse.org/MoDisco/Java/0.2.incubation/java
-- @path Data=/IMT-Retro-engineering/src/tp/fil/resources/Data.ecore

module DataComputation;
create OUT : Data from IN : Java;

endpoint rule Modele() {
	to t:
		Data!Modele (
			classes <- Java!ClassDeclaration.allInstances()
		)
}

rule ClassDeclarationToClasse {
	from s:
		Java!ClassDeclaration
	to t:
		Data!Classe (
			 nom <- s.name,
			 attributs <- s.bodyDeclarations
			                 ->select(x | x.oclType() = Java!FieldDeclaration)
							 ->collect(x | thisModule.FieldDeclarationToAttribut(x))
		)		
}

lazy rule FieldDeclarationToAttribut {
	from s:
		Java!FieldDeclaration
	to t:
		Data!Attribut (
			nom <- s.fragments.first().name,
			
			estTableau <- if s.type = OclUndefined 
			               then false 
						   else if s.type.type.name.toLower().regexReplaceAll('(.*)(collection|list)(.*)', 'true') = 'true'
						            then true
									else false
								endif
					   endif,
			
			typeStr <- if s.type = OclUndefined 
			               then 'unknown' 
						   else s.type.type.name.toLower() 
					   endif,
					   
			declarationType <- 
			           if s.type = OclUndefined 
					       then OclUndefined 
						   else thisModule.parseDeclarationType(s.type.type.name.toLower()) 
					   endif
		)
}

helper def: parseDeclarationType(typeStr : String) : Java!ClassDeclaration =
	-- If type is primitive, declaration type is empty
	if not (thisModule.primitiveTypeMap.get(typeStr) = OclUndefined) then
		OclUndefined
	else -- else, get the corresponding class
		-- if type is an array
		if typeStr.regexReplaceAll('(.*)(collection|list)(.*)', 'true') = 'true'
			then
				Java!ClassDeclaration.allInstances()->any(elem | elem.name.toLower() = typeStr.regexReplaceAll('(.*)\\.(.*)>', '$2'))
			else
				Java!ClassDeclaration.allInstances()->any(elem | elem.name.toLower() = typeStr)
			endif
	endif
	;
 	
helper def : primitiveTypeMap : Map(String, Boolean) =
	Map
	{
		('string', true),
		('unknown', true),
		('integer', true),
		('int', true),
		('double', true),
		('bigdecimal', true)
	}
	;
	